/*
 * This file is generated by jOOQ.
 */
package com.mackokodzi.analyticswarehouse.tables;

import com.mackokodzi.analyticswarehouse.Indexes;
import com.mackokodzi.analyticswarehouse.Keys;
import com.mackokodzi.analyticswarehouse.Public;
import com.mackokodzi.analyticswarehouse.config.jooq.InstantConverter;
import com.mackokodzi.analyticswarehouse.tables.records.CampaignStatisticsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CampaignStatistics extends TableImpl<CampaignStatisticsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.campaign_statistics</code>
     */
    public static final CampaignStatistics CAMPAIGN_STATISTICS = new CampaignStatistics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CampaignStatisticsRecord> getRecordType() {
        return CampaignStatisticsRecord.class;
    }

    /**
     * The column <code>public.campaign_statistics.id</code>.
     */
    public final TableField<CampaignStatisticsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.campaign_statistics.datasource</code>.
     */
    public final TableField<CampaignStatisticsRecord, String> DATASOURCE = createField(DSL.name("datasource"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.campaign_statistics.campaign_name</code>.
     */
    public final TableField<CampaignStatisticsRecord, String> CAMPAIGN_NAME = createField(DSL.name("campaign_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.campaign_statistics.date</code>.
     */
    public final TableField<CampaignStatisticsRecord, Instant> DATE = createField(DSL.name("date"), SQLDataType.TIMESTAMP(6).nullable(false), this, "", new InstantConverter());

    /**
     * The column <code>public.campaign_statistics.clicks</code>.
     */
    public final TableField<CampaignStatisticsRecord, Integer> CLICKS = createField(DSL.name("clicks"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.campaign_statistics.impressions</code>.
     */
    public final TableField<CampaignStatisticsRecord, Integer> IMPRESSIONS = createField(DSL.name("impressions"), SQLDataType.INTEGER.nullable(false), this, "");

    private CampaignStatistics(Name alias, Table<CampaignStatisticsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CampaignStatistics(Name alias, Table<CampaignStatisticsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.campaign_statistics</code> table reference
     */
    public CampaignStatistics(String alias) {
        this(DSL.name(alias), CAMPAIGN_STATISTICS);
    }

    /**
     * Create an aliased <code>public.campaign_statistics</code> table reference
     */
    public CampaignStatistics(Name alias) {
        this(alias, CAMPAIGN_STATISTICS);
    }

    /**
     * Create a <code>public.campaign_statistics</code> table reference
     */
    public CampaignStatistics() {
        this(DSL.name("campaign_statistics"), null);
    }

    public <O extends Record> CampaignStatistics(Table<O> child, ForeignKey<O, CampaignStatisticsRecord> key) {
        super(child, key, CAMPAIGN_STATISTICS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_UNIQUE_CAMPAIGN);
    }

    @Override
    public Identity<CampaignStatisticsRecord, Integer> getIdentity() {
        return (Identity<CampaignStatisticsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CampaignStatisticsRecord> getPrimaryKey() {
        return Keys.CAMPAIGN_STATISTICS_PKEY;
    }

    @Override
    public List<UniqueKey<CampaignStatisticsRecord>> getKeys() {
        return Arrays.<UniqueKey<CampaignStatisticsRecord>>asList(Keys.CAMPAIGN_STATISTICS_PKEY);
    }

    @Override
    public CampaignStatistics as(String alias) {
        return new CampaignStatistics(DSL.name(alias), this);
    }

    @Override
    public CampaignStatistics as(Name alias) {
        return new CampaignStatistics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CampaignStatistics rename(String name) {
        return new CampaignStatistics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CampaignStatistics rename(Name name) {
        return new CampaignStatistics(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, Instant, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
